vim.keymap.set('n', '<C-y>', ':SymbolsOutline<CR>', { desc = 'Toggle Symbols Outline', silent = true })

return {
  'simrat39/symbols-outline.nvim',
  config = function()
    require('symbols-outline').setup {
      highlight_hovered_item = true,
      show_guides = true,
      auto_preview = false,
      position = 'right',
      relative_width = true,
      width = 32,
      auto_close = false,
      show_numbers = true,
      show_relative_numbers = true,
      show_symbol_details = true,
      preview_bg_highlight = 'Pmenu',
      autofold_depth = 2,
      auto_unfold_hover = true,
      fold_markers = { '', '' },
      wrap = false,
      keymaps = { -- These keymaps can be a string or a table for multiple keys
        close = { '<Esc>', 'q' },
        goto_location = '<Cr>',
        focus_location = 'o',
        hover_symbol = '<C-space>',
        toggle_preview = 'K',
        rename_symbol = 'r',
        code_actions = 'a',
        fold = 'h',
        unfold = 'l',
        fold_all = 'W',
        unfold_all = 'E',
        fold_reset = 'R',
      },
      lsp_blacklist = {},
      symbol_blacklist = {},
      symbols = {
        File = { icon = '󰈔', hl = '@text.uri' },
        Module = { icon = '󰆧', hl = '@module' },
        Namespace = { icon = '󰌗', hl = '@namespace' },
        Package = { icon = '󰏖', hl = '@namespace' },
        Class = { icon = '󰠱', hl = '@type' },
        Method = { icon = '󰊕', hl = '@method' },
        Property = { icon = '󰜢', hl = '@property' },
        Field = { icon = '󰽐', hl = '@field' },
        Constructor = { icon = '', hl = '@constructor' },
        Enum = { icon = '', hl = '@type' },
        Interface = { icon = '', hl = '@type' },
        Function = { icon = '󰊕', hl = '@function' },
        Variable = { icon = '󰀫', hl = '@variable' },
        Constant = { icon = '󰏿', hl = '@constant' },
        String = { icon = '󰉿', hl = '@string' },
        Number = { icon = '󰎠', hl = '@number' },
        Boolean = { icon = '◩', hl = '@boolean' },
        Array = { icon = '󰅪', hl = '@punctuation.bracket' },
        Object = { icon = '󰅩', hl = '@type' },
        Key = { icon = '󰌋', hl = '@property' },
        Null = { icon = '󰟢', hl = '@constant.builtin' },
        EnumMember = { icon = '', hl = '@field' },
        Struct = { icon = '󰙅', hl = '@type' },
        Event = { icon = '', hl = '@type' },
        Operator = { icon = '󰆕', hl = '@operator' },
        TypeParameter = { icon = '󰊄', hl = '@type.parameter' },
      },
    }
  end,
}
